{"project": "pgmpy", "project_url": "http://pgmpy.org/", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"3556": "9381a66aba3c3871d3ccd00672b148d17d63239e", "3839": "d030b40847e4494a21c5a14e7a08d19a56497319", "3920": "a3a544694f55105208ae5edc1decd64be9ea913a", "4032": "588c04df1865eb08ffd0de7098420a7e6a79e87f", "4147": "a67dfdb30da5e98f1e18a1c42671b84dbd87c7c4", "4151": "421e224017a8ad05eec371497a88347db084c070", "4152": "2095285b351240c0f8e5c0d7e3a84bc49a7c5583", "4155": "dfff426ae64d9d3cb4d43f420331611f6109553d", "4156": "2f5b21f0085216a05357f2cad34329eca0b88fe2", "4157": "251f19e8d76fa53335ecb28a3853a771d3688c75", "4158": "da731270b7ff182a8f4953747bcf35cdbe3f5fab", "4160": "160312e627d1b9aaf43d9bccb7af62cedfffa0c6", "4161": "1499f2cfe7e416364b671d3650599edf9f556138"}, "revision_to_date": {"3556": 1555700705000, "3839": 1573292152000, "3920": 1579694518000, "4032": 1593520345000, "4147": 1597319754000, "4151": 1597834316000, "4152": 1597838341000, "4155": 1597933480000, "4156": 1597934195000, "4157": 1597954842000, "4158": 1598010608000, "4160": 1598017624000, "4161": 1598098943000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i7-6500U CPU @ 2.50GHz"], "machine": ["ankur-ux305"], "num_cpu": ["4"], "os": ["Linux 5.4.0-26-generic"], "ram": ["8046716"], "python": ["3.8"], "branch": ["dev"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6500U CPU @ 2.50GHz", "machine": "ankur-ux305", "num_cpu": "4", "os": "Linux 5.4.0-26-generic", "ram": "8046716", "python": "3.8", "branch": "dev"}], "benchmarks": {"factor.TimeDiscreteFactor.time_factor_define": {"code": "class TimeDiscreteFactor:\n    def time_factor_define(self):\n        phi = Factor(['x1', 'x2', 'x3'], [2, 2, 2], np.ones(8))\n\n    def setup(self):\n        self.phi = DiscreteFactor(['x1', 'x2', 'x3'], [2, 2, 2], np.ones(8))\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_define", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7e1efd40e65478e665855f59f293a56407d33573d34801123c40d9abbcfb5f5c", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_marginalize": {"code": "class TimeDiscreteFactor:\n    def time_factor_marginalize(self):\n        self.phi.marginalize(['x1'], inplace=False)\n\n    def setup(self):\n        self.phi = DiscreteFactor(['x1', 'x2', 'x3'], [2, 2, 2], np.ones(8))\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_marginalize", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1751edaf413761a8d2d33c37d0386a5acbcb614103c7ffd86ad968d971494f55", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_marginalize_large": {"code": "class TimeDiscreteFactor:\n    def time_factor_marginalize_large(self):\n        self.phi_large.marginalize([4, 5, 8], inplace=False)\n\n    def setup(self):\n        self.phi = DiscreteFactor(['x1', 'x2', 'x3'], [2, 2, 2], np.ones(8))\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_marginalize_large", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d191da79cb414cd21a1d1709f86146cd8bc661e8c126b8397e3319d2a088d503", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_multiply": {"code": "class TimeDiscreteFactor:\n    def time_factor_multiply(self):\n        phi = self.phi * self.phi\n\n    def setup(self):\n        self.phi = DiscreteFactor(['x1', 'x2', 'x3'], [2, 2, 2], np.ones(8))\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_multiply", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ed4892b8d8d967847c9c8a32925ed3db57fcccbd7c8f3dbd6b179b8c68eb1ba0", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_multiply_large": {"code": "class TimeDiscreteFactor:\n    def time_factor_multiply_large(self):\n        phi = self.phi_large * self.phi_large\n\n    def setup(self):\n        self.phi = DiscreteFactor(['x1', 'x2', 'x3'], [2, 2, 2], np.ones(8))\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_multiply_large", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "78237cc6cf21ae654638e61e776b5f46d1a0200fa0b3b25cbd10a7b39500eca2", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_reduce": {"code": "class TimeDiscreteFactor:\n    def time_factor_reduce(self):\n        self.phi.reduce([('x1', 0), ('x2', 1)], inplace=False)\n\n    def setup(self):\n        self.phi = DiscreteFactor(['x1', 'x2', 'x3'], [2, 2, 2], np.ones(8))\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_reduce", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "647c78f5d66c964ef591c1ae96b48152136fd2fda68075f73f41e1397f0ae829", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_reduce_large": {"code": "class TimeDiscreteFactor:\n    def time_factor_reduce_large(self):\n        self.phi_large.reduce([(3, 0), (6, 1)], inplace=False)\n\n    def setup(self):\n        self.phi = DiscreteFactor(['x1', 'x2', 'x3'], [2, 2, 2], np.ones(8))\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_reduce_large", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "035bee7b46b483d4df49a392d773d6b0764547c5c0b6b1548539987db2e6e424", "warmup_time": -1}, "readwrite.MemSuite.mem_list": {"code": "class MemSuite:\n    def mem_list(self):\n        return [0] * 256", "name": "readwrite.MemSuite.mem_list", "param_names": [], "params": [], "timeout": 60.0, "type": "memory", "unit": "bytes", "version": "abe86bab484550a681c61d7bb6eb081fbd37eb6d5009eba1df85c935530577b9"}, "readwrite.TimeRead.time_alarm_read": {"code": "class TimeRead:\n    def time_alarm_read(self):\n        self.get_example_model('alarm')\n\n    def setup(self):\n        from pgmpy.utils import get_example_model\n        self.get_example_model = get_example_model", "min_run_count": 2, "name": "readwrite.TimeRead.time_alarm_read", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ed22ba0629363f937a7050136f648eb524be528e791d857ec2c97d60f49402e0", "warmup_time": -1}, "readwrite.TimeRead.time_asia_read": {"code": "class TimeRead:\n    def time_asia_read(self):\n        self.get_example_model('asia')\n\n    def setup(self):\n        from pgmpy.utils import get_example_model\n        self.get_example_model = get_example_model", "min_run_count": 2, "name": "readwrite.TimeRead.time_asia_read", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9f07825719f3e3699c69094581028f691151fbe06c37c25e4cff3d7f7e4c0e34", "warmup_time": -1}, "readwrite.TimeRead.time_munin_read": {"code": "class TimeRead:\n    def time_munin_read(self):\n        self.get_example_model('munin')\n\n    def setup(self):\n        from pgmpy.utils import get_example_model\n        self.get_example_model = get_example_model", "min_run_count": 2, "name": "readwrite.TimeRead.time_munin_read", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "61f15f73fcc39dbbd470a13db44736faecaf86cc73f312b94be90a495cada76d", "warmup_time": -1}, "readwrite.TimeRead.time_pathfinder_read": {"code": "class TimeRead:\n    def time_pathfinder_read(self):\n        self.get_example_model('pathfinder')\n\n    def setup(self):\n        from pgmpy.utils import get_example_model\n        self.get_example_model = get_example_model", "min_run_count": 2, "name": "readwrite.TimeRead.time_pathfinder_read", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e55338c1772a5f031f8cef873495f419e932fdd8c720b605f5d4f908f381d3bd", "warmup_time": -1}, "structure_learning.TimePC.time_pc_orig": {"code": "class TimePC:\n    def time_pc_orig(self):\n        self.est.estimate(variant='orig')\n\n    def setup(self):\n        model = get_example_model('alarm')\n        self.s = BayesianModelSampling(model)\n        self.samples = self.s.forward_sample(size=int(1e4))\n        self.est = PC(self.samples)", "min_run_count": 2, "name": "structure_learning.TimePC.time_pc_orig", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "071fa17b096fb6b229749b505d68827eed32bc4a7de5c4a038391af7032f75db", "warmup_time": -1}, "structure_learning.TimePC.time_pc_stable": {"code": "class TimePC:\n    def time_pc_stable(self):\n        self.est.estimate(variant='stable')\n\n    def setup(self):\n        model = get_example_model('alarm')\n        self.s = BayesianModelSampling(model)\n        self.samples = self.s.forward_sample(size=int(1e4))\n        self.est = PC(self.samples)", "min_run_count": 2, "name": "structure_learning.TimePC.time_pc_stable", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "36b82b117c593895d17fd8349cbf94c79f476907bc74b9746bdc1d93ec53af41", "warmup_time": -1}, "structure_learning.TimePC.time_samples": {"code": "class TimePC:\n    def time_samples(self):\n        self.s.forward_sample(size=int(1e5))\n\n    def setup(self):\n        model = get_example_model('alarm')\n        self.s = BayesianModelSampling(model)\n        self.samples = self.s.forward_sample(size=int(1e4))\n        self.est = PC(self.samples)", "min_run_count": 2, "name": "structure_learning.TimePC.time_samples", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e41d1f081f1c0a03b5c65e15aecc321a7dea486f294dfdedfefb42827aaa0cd3", "warmup_time": -1}}, "machines": {"ankur-ux305": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6500U CPU @ 2.50GHz", "machine": "ankur-ux305", "num_cpu": "4", "os": "Linux 5.4.0-26-generic", "ram": "8046716", "version": 1}}, "tags": {"v0.1.10": 3920, "v0.1.11": 4032, "v0.1.8": 3556, "v0.1.9": 3839}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}