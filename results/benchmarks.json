{
    "factor.TimeDiscreteFactor.time_copy": {
        "code": "class TimeDiscreteFactor:\n    def time_copy(self):\n        self.phi_large.copy()\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))",
        "min_run_count": 2,
        "name": "factor.TimeDiscreteFactor.time_copy",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "7ca18c4459ccaee8e5696e370f8bd897c1058bf2e7f975238ad8d208c0cc78d2",
        "warmup_time": -1
    },
    "factor.TimeDiscreteFactor.time_factor_compare": {
        "code": "class TimeDiscreteFactor:\n    def time_factor_compare(self):\n        self.phi_large == self.phi_large\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))",
        "min_run_count": 2,
        "name": "factor.TimeDiscreteFactor.time_factor_compare",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "95feb42df85ffe5cf519cf4af677309a5cdb891db99ad54b655196c3e1f2e13a",
        "warmup_time": -1
    },
    "factor.TimeDiscreteFactor.time_factor_marginalize": {
        "code": "class TimeDiscreteFactor:\n    def time_factor_marginalize(self):\n        self.phi_large.marginalize([4, 5, 8], inplace=False)\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))",
        "min_run_count": 2,
        "name": "factor.TimeDiscreteFactor.time_factor_marginalize",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a3ae79cdcf3bcd4bc49df94b3b3d5f93c4126249a9b3cf2481ac381ee836f851",
        "warmup_time": -1
    },
    "factor.TimeDiscreteFactor.time_factor_multiply_large": {
        "code": "class TimeDiscreteFactor:\n    def time_factor_multiply_large(self):\n        phi = self.phi_large * self.phi_large\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))",
        "min_run_count": 2,
        "name": "factor.TimeDiscreteFactor.time_factor_multiply_large",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cfb6b66fddb2953948ffb6566ae101535dd1e8d0fd9af855331f39ef905f4450",
        "warmup_time": -1
    },
    "factor.TimeDiscreteFactor.time_factor_reduce": {
        "code": "class TimeDiscreteFactor:\n    def time_factor_reduce(self):\n        self.phi_large.reduce([(3, 0), (6, 1)], inplace=False)\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))",
        "min_run_count": 2,
        "name": "factor.TimeDiscreteFactor.time_factor_reduce",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "cb3858b638914f7572792153a60efb4aecbde56d5abf039791451adb0f26c263",
        "warmup_time": -1
    },
    "import.TimeImport.timeraw_import": {
        "code": "class TimeImport:\n    def timeraw_import(self):\n        return \"\"\"\n        import pgmpy\n        \"\"\"",
        "min_run_count": 2,
        "name": "import.TimeImport.timeraw_import",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "4a5fceffe76372968cdf23cf3a5bd5329bd43241962a24d94808f6a8ae05d465",
        "warmup_time": -1
    },
    "inference.TimeBeliefPropagationAlarm.peakmem_query": {
        "code": "class TimeBeliefPropagationAlarm:\n    def peakmem_query(self):\n        infer = BeliefPropagation(self.alarm)\n        infer.query(variables=['VENTLUNG'])\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')",
        "name": "inference.TimeBeliefPropagationAlarm.peakmem_query",
        "param_names": [],
        "params": [],
        "timeout": 600,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "806e587863709d807cd37258f3e4ff6531b3af63d9b0d925dbf33820b6370d52"
    },
    "inference.TimeBeliefPropagationAlarm.time_query": {
        "code": "class TimeBeliefPropagationAlarm:\n    def time_query(self):\n        infer = BeliefPropagation(self.alarm)\n        infer.query(variables=['VENTLUNG'])\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')",
        "min_run_count": 2,
        "name": "inference.TimeBeliefPropagationAlarm.time_query",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "8e3f583900cb7d0971387fe01fb447ac347d612b967d35c363d5ada310d67642",
        "warmup_time": -1
    },
    "inference.TimeVariableEliminationAlarm.peakmem_query": {
        "code": "class TimeVariableEliminationAlarm:\n    def peakmem_query(self):\n        infer = VariableElimination(self.alarm)\n        infer.query(variables=['VENTLUNG', 'VENTALV', 'ARTCO2', 'CATECHOL'])\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')",
        "name": "inference.TimeVariableEliminationAlarm.peakmem_query",
        "param_names": [],
        "params": [],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "8fb7f934478692f6942ce5220952d796cac61162c04a38713da4b0d12f7350bd"
    },
    "inference.TimeVariableEliminationAlarm.time_query": {
        "code": "class TimeVariableEliminationAlarm:\n    def time_query(self):\n        infer = VariableElimination(self.alarm)\n        infer.query(variables=['VENTLUNG', 'VENTALV', 'ARTCO2', 'CATECHOL'])\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')",
        "min_run_count": 2,
        "name": "inference.TimeVariableEliminationAlarm.time_query",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "9afe2f3b4ea0ac283ff7578b676d09dea08a5430b501f67adfe9031c1e8aca54",
        "warmup_time": -1
    },
    "inference.TimeVariableEliminationMunin.peakmem_query": {
        "code": "class TimeVariableEliminationMunin:\n    def peakmem_query(self):\n        infer = VariableElimination(self.munin)\n        infer.query(variables=['L_LNLC8_ADM_MALOSS', 'L_LNLLP_ADM_MALOSS', 'L_LNLC8_LP_ADM_MALOSS', 'L_LNLE_ADM_MALOSS'])\n\n    def setup(self):\n        self.munin = get_example_model('munin')",
        "name": "inference.TimeVariableEliminationMunin.peakmem_query",
        "param_names": [],
        "params": [],
        "type": "peakmemory",
        "unit": "bytes",
        "version": "4afd10111d6652d83a2ff7af9ba1198cc44b6c1d091175f30903a1e4de59ca23"
    },
    "inference.TimeVariableEliminationMunin.time_query": {
        "code": "class TimeVariableEliminationMunin:\n    def time_query(self):\n        infer = VariableElimination(self.munin)\n        infer.query(variables=['L_LNLC8_ADM_MALOSS', 'L_LNLLP_ADM_MALOSS', 'L_LNLC8_LP_ADM_MALOSS', 'L_LNLE_ADM_MALOSS'])\n\n    def setup(self):\n        self.munin = get_example_model('munin')",
        "min_run_count": 2,
        "name": "inference.TimeVariableEliminationMunin.time_query",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "d57459b698fe6d68c4ed61ca0a9050ca2165542cbe239d1fde792877c82de579",
        "warmup_time": -1
    },
    "parameter_learning.TimeBayesianEstimatorAlarm.peakmem_bayesian_estimator": {
        "code": "class TimeBayesianEstimatorAlarm:\n    def peakmem_bayesian_estimator(self, est):\n        est.get_parameters(n_jobs=1)\n\n    def setup_cache(self):\n        alarm = get_example_model('alarm')\n        alarm_model = BayesianNetwork(alarm.edges())\n        self.alarm_est = BayesianEstimator(alarm_model, alarm.simulate(int(1e3)))\n        return self.alarm_est",
        "name": "parameter_learning.TimeBayesianEstimatorAlarm.peakmem_bayesian_estimator",
        "param_names": [],
        "params": [],
        "setup_cache_key": "parameter_learning:54",
        "timeout": 1200,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "e7dfa87b078751ec5bc7ae0954850c1acc38b93197292d6ff82013389475eb35"
    },
    "parameter_learning.TimeBayesianEstimatorAlarm.time_bayesian_estimator": {
        "code": "class TimeBayesianEstimatorAlarm:\n    def time_bayesian_estimator(self, est):\n        est.get_parameters(n_jobs=1)\n\n    def setup_cache(self):\n        alarm = get_example_model('alarm')\n        alarm_model = BayesianNetwork(alarm.edges())\n        self.alarm_est = BayesianEstimator(alarm_model, alarm.simulate(int(1e3)))\n        return self.alarm_est",
        "min_run_count": 2,
        "name": "parameter_learning.TimeBayesianEstimatorAlarm.time_bayesian_estimator",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "parameter_learning:54",
        "timeout": 1200,
        "type": "time",
        "unit": "seconds",
        "version": "793ccdb4199467f142173941a2e681b6957248a871adb095497d04f44f3ea143",
        "warmup_time": -1
    },
    "parameter_learning.TimeBayesianEstimatorMunin.peakmem_bayesian_estimator": {
        "code": "class TimeBayesianEstimatorMunin:\n    def peakmem_bayesian_estimator(self, est):\n        est.get_parameters(n_jobs=-1)\n\n    def setup_cache(self):\n        munin = get_example_model('munin')\n        munin_model = BayesianNetwork(munin.edges())\n        self.munin_est = BayesianEstimator(munin_model, munin.simulate(int(1e3)))\n        return self.munin_est",
        "name": "parameter_learning.TimeBayesianEstimatorMunin.peakmem_bayesian_estimator",
        "param_names": [],
        "params": [],
        "setup_cache_key": "parameter_learning:75",
        "timeout": 1200,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "e04f81b1b0499099eb077c4cd44be826692268c257d1f6097c5dbab2c71a7e45"
    },
    "parameter_learning.TimeBayesianEstimatorMunin.time_bayesian_estimator": {
        "code": "class TimeBayesianEstimatorMunin:\n    def time_bayesian_estimator(self, est):\n        est.get_parameters(n_jobs=-1)\n\n    def setup_cache(self):\n        munin = get_example_model('munin')\n        munin_model = BayesianNetwork(munin.edges())\n        self.munin_est = BayesianEstimator(munin_model, munin.simulate(int(1e3)))\n        return self.munin_est",
        "min_run_count": 2,
        "name": "parameter_learning.TimeBayesianEstimatorMunin.time_bayesian_estimator",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "parameter_learning:75",
        "timeout": 1200,
        "type": "time",
        "unit": "seconds",
        "version": "084ce1ae28e8db6c5b1fb5b67673efedcc199f13cc3aaa98da7675e0c3be0164",
        "warmup_time": -1
    },
    "parameter_learning.TimeExpectationMaximizationAlarm.peakmem_em": {
        "code": "class TimeExpectationMaximizationAlarm:\n    def peakmem_em(self, est):\n        est.get_parameters(n_jobs=1)\n\n    def setup_cache(self):\n        alarm = get_example_model('alarm')\n        alarm_model = BayesianNetwork(alarm.edges())\n        self.alarm_est = ExpectationMaximization(alarm_model, alarm.simulate(int(1e3)))\n        return self.alarm_est",
        "name": "parameter_learning.TimeExpectationMaximizationAlarm.peakmem_em",
        "param_names": [],
        "params": [],
        "setup_cache_key": "parameter_learning:96",
        "timeout": 600,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "09b076d672fe966b4dfd27eef49750e2021d29bd0b11254ce6b51d9dcf473622"
    },
    "parameter_learning.TimeExpectationMaximizationAlarm.time_em": {
        "code": "class TimeExpectationMaximizationAlarm:\n    def time_em(self, est):\n        est.get_parameters(n_jobs=1)\n\n    def setup_cache(self):\n        alarm = get_example_model('alarm')\n        alarm_model = BayesianNetwork(alarm.edges())\n        self.alarm_est = ExpectationMaximization(alarm_model, alarm.simulate(int(1e3)))\n        return self.alarm_est",
        "min_run_count": 2,
        "name": "parameter_learning.TimeExpectationMaximizationAlarm.time_em",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "parameter_learning:96",
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "87dada5bfc78f7b538adbbe4ffde9eb90e8412f2cb5fa2d5c84a04374eb66d8e",
        "warmup_time": -1
    },
    "parameter_learning.TimeExpectationMaximizationMunin.peakmem_em": {
        "code": "class TimeExpectationMaximizationMunin:\n    def peakmem_em(self, est):\n        est.get_parameters(n_jobs=-1)\n\n    def setup_cache(self):\n        munin = get_example_model('munin')\n        munin_model = BayesianNetwork(munin.edges())\n        self.munin_est = ExpectationMaximization(munin_model, munin.simulate(int(1e3)))\n        return self.munin_est",
        "name": "parameter_learning.TimeExpectationMaximizationMunin.peakmem_em",
        "param_names": [],
        "params": [],
        "setup_cache_key": "parameter_learning:117",
        "timeout": 600,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "ddb7ab1998d94fb6e35ba60e6950b601037ad84da3e0187dfb7103f197a2b295"
    },
    "parameter_learning.TimeExpectationMaximizationMunin.time_em": {
        "code": "class TimeExpectationMaximizationMunin:\n    def time_em(self, est):\n        est.get_parameters(n_jobs=-1)\n\n    def setup_cache(self):\n        munin = get_example_model('munin')\n        munin_model = BayesianNetwork(munin.edges())\n        self.munin_est = ExpectationMaximization(munin_model, munin.simulate(int(1e3)))\n        return self.munin_est",
        "min_run_count": 2,
        "name": "parameter_learning.TimeExpectationMaximizationMunin.time_em",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "parameter_learning:117",
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "bb5fe4076c21884eff81797a66070b4d8ff0f01d18df5e46948491a0847ed428",
        "warmup_time": -1
    },
    "parameter_learning.TimeMLEAlarm.peakmem_mle": {
        "code": "class TimeMLEAlarm:\n    def peakmem_mle(self, alarm_est):\n        alarm_est.get_parameters(n_jobs=1)\n\n    def setup_cache(self):\n        alarm = get_example_model('alarm')\n        alarm_model = BayesianNetwork(alarm.edges())\n        return MaximumLikelihoodEstimator(alarm_model, alarm.simulate(int(1e3)))",
        "name": "parameter_learning.TimeMLEAlarm.peakmem_mle",
        "param_names": [],
        "params": [],
        "setup_cache_key": "parameter_learning:14",
        "timeout": 600,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "185bc76da666cfeb41d06ecff54219edbb56ae493d52de9aa03839e69b32236a"
    },
    "parameter_learning.TimeMLEAlarm.time_mle": {
        "code": "class TimeMLEAlarm:\n    def time_mle(self, alarm_est):\n        alarm_est.get_parameters(n_jobs=1)\n\n    def setup_cache(self):\n        alarm = get_example_model('alarm')\n        alarm_model = BayesianNetwork(alarm.edges())\n        return MaximumLikelihoodEstimator(alarm_model, alarm.simulate(int(1e3)))",
        "min_run_count": 2,
        "name": "parameter_learning.TimeMLEAlarm.time_mle",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "parameter_learning:14",
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "41f567109eb65f6ab2d9b8a8f5deffc52108545c1ff9350a485efa6bec36150d",
        "warmup_time": -1
    },
    "parameter_learning.TimeMLEMunin.peakmem_mle": {
        "code": "class TimeMLEMunin:\n    def peakmem_mle(self, munin_est):\n        munin_est.get_parameters(n_jobs=-1)\n\n    def setup_cache(self):\n        munin = get_example_model('munin')\n        munin_model = BayesianNetwork(munin.edges())\n        return MaximumLikelihoodEstimator(munin_model, munin.simulate(int(1e3)))",
        "name": "parameter_learning.TimeMLEMunin.peakmem_mle",
        "param_names": [],
        "params": [],
        "setup_cache_key": "parameter_learning:34",
        "timeout": 600,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "591e2066c808bfbe0f8bafc6a13b0487ce54f777fc9fdb9cb097a622b808cb19"
    },
    "parameter_learning.TimeMLEMunin.time_mle": {
        "code": "class TimeMLEMunin:\n    def time_mle(self, munin_est):\n        munin_est.get_parameters(n_jobs=-1)\n\n    def setup_cache(self):\n        munin = get_example_model('munin')\n        munin_model = BayesianNetwork(munin.edges())\n        return MaximumLikelihoodEstimator(munin_model, munin.simulate(int(1e3)))",
        "min_run_count": 2,
        "name": "parameter_learning.TimeMLEMunin.time_mle",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 2,
        "sample_time": 0.01,
        "setup_cache_key": "parameter_learning:34",
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "bbc415c58879f0b3ccf5d60b4f5c763906b94bcc5158d273e7217d35b8b6e325",
        "warmup_time": -1
    },
    "readwrite.TimeReadAlarm.time_read": {
        "code": "class TimeReadAlarm:\n    def time_read(self):\n        get_example_model('alarm')\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')",
        "min_run_count": 2,
        "name": "readwrite.TimeReadAlarm.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "946382cb51c56be8e4d3dbdcb8fa7655ca535ca6f40179086c8045679fbc5f4a",
        "warmup_time": -1
    },
    "readwrite.TimeReadAlarm.time_write": {
        "code": "class TimeReadAlarm:\n    def time_write(self):\n        BIFWriter(self.alarm).write_bif('\\tmp')\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')",
        "min_run_count": 2,
        "name": "readwrite.TimeReadAlarm.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "44d8fb06a598d3610e3830fbb316a05c3e38a350a752123c1b68a2426ae92b6c",
        "warmup_time": -1
    },
    "readwrite.TimeReadMunin.time_read": {
        "code": "class TimeReadMunin:\n    def time_read(self):\n        get_example_model('munin')\n\n    def setup(self):\n        self.munin = get_example_model('munin')",
        "min_run_count": 2,
        "name": "readwrite.TimeReadMunin.time_read",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "09c11b75db429e36ed7e59f7f1d78748696673e8e6f2e280bda39960c9586808",
        "warmup_time": -1
    },
    "readwrite.TimeReadMunin.time_write": {
        "code": "class TimeReadMunin:\n    def time_write(self):\n        BIFWriter(self.munin).write_bif('\\tmp')\n\n    def setup(self):\n        self.munin = get_example_model('munin')",
        "min_run_count": 2,
        "name": "readwrite.TimeReadMunin.time_write",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "bd102a3c9bf11bc43cc7d5afb3e20fb9890a0f792e1a3d4e1de8e6d4d811ecf1",
        "warmup_time": -1
    },
    "sampling.TimeSamplingAlarm.time_forward_sample": {
        "code": "class TimeSamplingAlarm:\n    def time_forward_sample(self):\n        self.model.simulate(n_samples=int(1e3), show_progress=False)\n\n    def setup(self):\n        self.model = get_example_model('alarm')",
        "min_run_count": 2,
        "name": "sampling.TimeSamplingAlarm.time_forward_sample",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 600.0,
        "type": "time",
        "unit": "seconds",
        "version": "7dfc365fea40a762ce478b49241cb30b8af2bb8cc33758b7181999acfaf3e986",
        "warmup_time": -1
    },
    "sampling.TimeSamplingMunin.time_forward_sample": {
        "code": "class TimeSamplingMunin:\n    def time_forward_sample(self):\n        self.model.simulate(n_samples=int(1e3), show_progress=False)\n\n    def setup(self):\n        self.model = get_example_model('munin')",
        "min_run_count": 2,
        "name": "sampling.TimeSamplingMunin.time_forward_sample",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 600.0,
        "type": "time",
        "unit": "seconds",
        "version": "e357daa15dc8a030427286d9d8e9907287182d3040001400f35013207157cab2",
        "warmup_time": -1
    },
    "structure_learning.TimeHillClimbAlarm.time_hillclimb": {
        "code": "class TimeHillClimbAlarm:\n    def time_hillclimb(self):\n        self.est.estimate(max_indegree=4, scoring_method=self.scoring_method, max_iter=int(1e3))\n\n    def setup(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.scoring_method = K2Score(samples)\n        self.est = HillClimbSearch(data=samples)",
        "min_run_count": 2,
        "name": "structure_learning.TimeHillClimbAlarm.time_hillclimb",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 1,
        "sample_time": 0.01,
        "timeout": 1200.0,
        "type": "time",
        "unit": "seconds",
        "version": "e9bb677cc8e0b9733d0f7d3b2fea82ec7ed1e46df6efc66c9260d9438a9590aa",
        "warmup_time": -1
    },
    "structure_learning.TimePCAlarm.time_pc_orig": {
        "code": "class TimePCAlarm:\n    def time_pc_orig(self, est):\n        est.estimate(variant='orig', max_cond_vars=3)\n\n    def setup_cache(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.est = PC(samples)\n        return self.est",
        "min_run_count": 2,
        "name": "structure_learning.TimePCAlarm.time_pc_orig",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 1,
        "sample_time": 0.01,
        "setup_cache_key": "structure_learning:15",
        "timeout": 1200.0,
        "type": "time",
        "unit": "seconds",
        "version": "5e523c915e22708031dc4d21f07e0d7f440f887a9db2d13e59dc33a6497527a5",
        "warmup_time": -1
    },
    "structure_learning.TimePCAlarm.time_pc_parallel": {
        "code": "class TimePCAlarm:\n    def time_pc_parallel(self, est):\n        est.estimate(variant='parallel', max_cond_vars=3, n_jobs=-1)\n\n    def setup_cache(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.est = PC(samples)\n        return self.est",
        "min_run_count": 2,
        "name": "structure_learning.TimePCAlarm.time_pc_parallel",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 1,
        "sample_time": 0.01,
        "setup_cache_key": "structure_learning:15",
        "timeout": 1200.0,
        "type": "time",
        "unit": "seconds",
        "version": "b72569f263a25d137e10c6b39c89c250e37a55728628a6989e7b6628344bc6d7",
        "warmup_time": -1
    },
    "structure_learning.TimePCAlarm.time_pc_stable": {
        "code": "class TimePCAlarm:\n    def time_pc_stable(self, est):\n        est.estimate(variant='stable', max_cond_vars=3)\n\n    def setup_cache(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.est = PC(samples)\n        return self.est",
        "min_run_count": 2,
        "name": "structure_learning.TimePCAlarm.time_pc_stable",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 1,
        "sample_time": 0.01,
        "setup_cache_key": "structure_learning:15",
        "timeout": 1200.0,
        "type": "time",
        "unit": "seconds",
        "version": "ed5b40b7827deb2bdd11f9ce2610766add3b2dea104afc9312da66f614187ff1",
        "warmup_time": -1
    },
    "structure_learning.TimePCMunin.time_pc_orig": {
        "code": "class TimePCMunin:\n    def time_pc_orig(self, est):\n        est.estimate(variant='orig', max_cond_vars=3)\n\n    def setup_cache(self):\n        model = get_example_model('munin1')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.est = PC(samples)\n        return self.est",
        "min_run_count": 2,
        "name": "structure_learning.TimePCMunin.time_pc_orig",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 1,
        "sample_time": 0.01,
        "setup_cache_key": "structure_learning:40",
        "timeout": 600.0,
        "type": "time",
        "unit": "seconds",
        "version": "70dd19e592c5f6001d51db73baa84155eb754f82996ae90a7e9a19b7ce0ae935",
        "warmup_time": -1
    },
    "structure_learning.TimePCMunin.time_pc_parallel": {
        "code": "class TimePCMunin:\n    def time_pc_parallel(self, est):\n        est.estimate(variant='parallel', max_cond_vars=3, n_jobs=-1)\n\n    def setup_cache(self):\n        model = get_example_model('munin1')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.est = PC(samples)\n        return self.est",
        "min_run_count": 2,
        "name": "structure_learning.TimePCMunin.time_pc_parallel",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 1,
        "sample_time": 0.01,
        "setup_cache_key": "structure_learning:40",
        "timeout": 600.0,
        "type": "time",
        "unit": "seconds",
        "version": "89a9be1a04072cb0045f753a1782d806db6c27e551cb28e89542518fee625982",
        "warmup_time": -1
    },
    "structure_learning.TimeTreeSearchAlarm.time_tan": {
        "code": "class TimeTreeSearchAlarm:\n    def time_tan(self):\n        self.est.estimate(estimator_type=\"tan\", class_node=\"HISTORY\", show_progress=False)\n\n    def setup(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e3), show_progress=False)\n        self.est = TreeSearch(samples, n_jobs=-1)",
        "min_run_count": 2,
        "name": "structure_learning.TimeTreeSearchAlarm.time_tan",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 1,
        "sample_time": 0.01,
        "timeout": 1200.0,
        "type": "time",
        "unit": "seconds",
        "version": "67bbe0cc31f983620ba3f0bce1c2791cbe0fa7f75f52c94fcac2b79da81ebe64",
        "warmup_time": -1
    },
    "structure_learning.TimeTreeSearchMunin.time_tan": {
        "code": "class TimeTreeSearchMunin:\n    def time_tan(self):\n        self.est.estimate(estimator_type=\"tan\", class_node=\"R_LNLW_APB_MALOSS\", show_progress=False)\n\n    def setup(self):\n        model = get_example_model('munin1')\n        samples = model.simulate(n_samples=int(1e3), show_progress=False)\n        self.est = TreeSearch(samples, n_jobs=-1)",
        "min_run_count": 2,
        "name": "structure_learning.TimeTreeSearchMunin.time_tan",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 1,
        "rounds": 1,
        "sample_time": 0.01,
        "timeout": 1200.0,
        "type": "time",
        "unit": "seconds",
        "version": "5a0c3e0c2b85b577537dd4539b52cad2927cf5ad41a6d50a4f46e6633573cff9",
        "warmup_time": -1
    },
    "version": 2
}